//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class User
{
	protected int numPorts;

    protected double _balance;
	public virtual double balance
	{
		get { return this._balance; }
	}

    protected double _tradeFee;
	public virtual double tradeFee
	{
		get { return this._tradeFee; }
	}

    protected double _transferFee;
    public virtual double transferFee
	{
		get { return this._transferFee; }
	}

	protected Dictionary<string, Portfolio> portfolios;

	public virtual void AddFunds(double addAmount)
	{
        if (addAmount <= this._transferFee)
            throw new ArgumentOutOfRangeException();
        this._balance += addAmount - this._transferFee;
	}

	public virtual void WithdrawFunds(double withAmount)
	{
        if (withAmount + this._transferFee < this._balance)
            throw new ArgumentOutOfRangeException();
        this._balance -= withAmount - this._transferFee;
    }

	public User(double newTradeFee, double newTransferFee, double initBalance)
	{
        this._tradeFee = newTradeFee;
        this._transferFee = newTransferFee;
        this._balance = initBalance;
	}

	public virtual void AddPortfolio(string portName)
	{
        if (this.numPorts >= 3)
            throw new ArgumentOutOfRangeException();
        this.portfolios.Add(portName, new Portfolio());
	}

	public virtual void Purchase(string port, string symbol, int numShares, double shareValue, DateTime tradeDate)
	{
        double purchaseAmount = numShares * shareValue + this._tradeFee;
        if (purchaseAmount > this._balance)
            throw new ArgumentOutOfRangeException();
        this.portfolios[port].Purchase(symbol, new Purchase(numShares, shareValue, tradeDate));
        this._balance -= purchaseAmount;
	}

	public virtual void Sell(string port, string symbol, int numShares, double shareValue, DateTime tradeDate)
	{
        double sellAmount = numShares * shareValue - this._tradeFee;
        if (sellAmount <= 0)
            throw new ArgumentOutOfRangeException();
        this.portfolios[port].Sell(symbol, new Sale(numShares, shareValue, tradeDate));
        this._balance += sellAmount;
    }

	public virtual void ToString()
	{
		throw new System.NotImplementedException();
	}

	public virtual void DeletePortfolio(string portName)
	{
        if (this.portfolios[portName].Value > this._tradeFee)
            this._balance += this.portfolios[portName].Value;
        this.portfolios.Remove(portName);
	}

	public virtual double GainLossReport(string portName, DateTime startDate, DateTime endDate)
	{
        double returnVal = 0;
        foreach (Portfolio p in this.portfolios.Values)
            returnVal += p.Value;
        return returnVal;
	}

}

