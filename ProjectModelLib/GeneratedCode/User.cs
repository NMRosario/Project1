//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class User
{
	protected int _numPorts;

    public int numPorts
    {
        get { return this._numPorts; }
    }
    protected double _balance;

    protected double _tradeFee;
	public virtual double tradeFee
	{
		get { return this._tradeFee; }
	}

    protected double _transferFee;
    public virtual double transferFee
	{
		get { return this._transferFee; }
	}

	protected Dictionary<string, Portfolio> portfolios;

	public virtual void AddFunds(double addAmount, string port)
	{
        if (addAmount <= this._transferFee)
            throw new ArgumentOutOfRangeException();
        this.portfolios[port].cash += addAmount - this._transferFee;
	}

    public virtual void AddFunds(double addAmount)
    {
        if (this._transferFee >= addAmount)
            throw new ArgumentOutOfRangeException();
        this._balance += addAmount - this._transferFee;
    }

	public virtual void WithdrawFunds(double withAmount, string port)
	{
        if (this._transferFee >= withAmount || this._transferFee + withAmount > this.portfolios[port].cash)
            throw new ArgumentOutOfRangeException();
        this.portfolios[port].cash -= withAmount + this._transferFee;
    }

    public virtual void WithdrawFunds(double withAmount)
    {
        if (this._transferFee >= withAmount || this._transferFee + withAmount > this._balance)
            throw new ArgumentOutOfRangeException();
        this._balance -= withAmount + this._transferFee;
    }

	public User(double newTradeFee, double newTransferFee)
	{
        this.portfolios = new Dictionary<string, Portfolio>();
        this._tradeFee = newTradeFee;
        this._transferFee = newTransferFee;
        this._balance = 0;
	}

	public virtual void AddPortfolio(string portName)
	{
        if (this._numPorts >= 3)
            throw new ArgumentOutOfRangeException();
        this.portfolios.Add(portName, new Portfolio());
        this._numPorts++;
	}

	public virtual void Purchase(string port, string symbol, int numShares, double shareValue, DateTime tradeDate)
	{
        this.portfolios[port].Purchase(symbol, this._tradeFee, new Purchase(numShares, shareValue, tradeDate));
	}

	public virtual void Sell(string port, string symbol, int numShares, double shareValue, DateTime tradeDate)
	{
        this.portfolios[port].Sell(symbol, this._tradeFee, new Sale(numShares, shareValue, tradeDate));
    }

	public override string ToString()
	{
        string returnVal = "Cash: $" + this._balance + "\n";
        foreach (string port in this.portfolios.Keys)
        {
            returnVal += port + ":\n" + this.portfolios[port].ToString() + "\n";
        }
        return returnVal;
	}

	public virtual void DeletePortfolio(string portName)
	{
        if (this.portfolios[portName].Value > this._tradeFee)
            this._balance += this.portfolios[portName].Value;
        this.portfolios.Remove(portName);
        this._numPorts--;
	}

	public virtual double GainLossReport(string portName, DateTime startDate, DateTime endDate)
	{
        double returnVal = 0;
        foreach (Portfolio p in this.portfolios.Values)
            returnVal += p.GainLossReport(startDate, endDate);
        return returnVal;
	}

}

