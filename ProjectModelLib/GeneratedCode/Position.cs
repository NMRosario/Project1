//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class Position
{
    public int numShares
    {
        get
        {
            int returnVal = 0;
            foreach (Trade trade in this.trades)
                if (trade is Purchase)
                    returnVal += trade.numShares;
                else
                    returnVal -= trade.numShares;
            return returnVal;
        }
    }
    protected double _currShareValue;
    public virtual double currShareValue
    {
        get { return this._currShareValue; }
    }
    public virtual double value
	{
		get
        {
            return numShares * currShareValue;
        }
	}

	protected Stack<Trade> trades;

	public virtual double GainLossReport(DateTime startDate, DateTime endDate)
	{
        double returnVal = 0;
        Stack<Trade> tradesCopy = new Stack<Trade>(this.trades);
        Trade nextTrade = tradesCopy.Pop();
        while (nextTrade.tradeDate.CompareTo(endDate) > 0)
        {
            nextTrade = tradesCopy.Pop();
            if (tradesCopy.Peek() == null)
                return returnVal;
        }
        while (nextTrade.tradeDate.CompareTo(startDate) >= 0)
        {
            returnVal += nextTrade.value;
            nextTrade = tradesCopy.Pop();
            if (tradesCopy.Peek() == null)
                return returnVal;
        }
        return returnVal;
    }

	public Position(Purchase initPurchase)
	{
        this.trades = new Stack<Trade>();
        this._currShareValue = initPurchase.shareValue;
        this.Purchase(initPurchase);
	}

	public virtual void Purchase(Purchase purchase)
	{
        this.trades.Push(purchase);
	}

	public virtual void Sell(Sale sale)
	{
        if (sale.numShares > this.numShares)
            throw new ArgumentOutOfRangeException();
        this.trades.Push(sale);
	}

}

