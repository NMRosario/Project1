//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class Portfolio
{
	protected Dictionary<string, Position> positions;

	public virtual double Value
	{
        get
        {
            double returnVal = this._cash;
            foreach (Position p in this.positions.Values)
                returnVal += p.value;
            return returnVal;
        }
	}

    protected double _cash;
    public virtual double cash
    {
        get { return this._cash; }
        set { this._cash = value; }
    }

    public override string ToString()
	{
        string returnVal = "    Value: $" + Value.ToString() + "\n    Cash: $" + this._cash +
            " (" + Math.Truncate(this._cash * 10000 / this.Value) / 100 + "%)";
        foreach (string symbol in this.positions.Keys)
            if (this.positions[symbol].numShares > 0)
                returnVal += "\n    " + symbol + ": " + this.positions[symbol].numShares + " shares worth $"
                    + this.positions[symbol].value + " (" +
                    Math.Truncate(this.positions[symbol].value * 10000 / this.Value) / 100 + "%)";
        return returnVal;
	}

	public virtual void Purchase(string symbol, double tradeFee, Purchase purchase)
	{
        double purchasePrice = purchase.value + tradeFee;
        if (purchasePrice > this._cash)
            throw new ArgumentOutOfRangeException();
        if (!this.positions.Keys.Contains(symbol))
            this.positions.Add(symbol, new Position(purchase));
        else
            this.positions[symbol].Purchase(purchase);
        this._cash -= purchasePrice;
	}

	public virtual void Sell(string symbol, double tradeFee, Sale sale)
	{
        double saleValue = sale.numShares * sale.shareValue - tradeFee;
        if (saleValue <= 0)
            throw new ArgumentOutOfRangeException();
        this.positions[symbol].Sell(sale);
        this._cash += saleValue;
	}

	public virtual double GainLossReport(DateTime startDate, DateTime endDate)
	{
        double returnVal = 0;
        foreach (Position p in this.positions.Values)
            returnVal += p.GainLossReport(startDate, endDate);
        return returnVal;
	}

	public Portfolio()
	{
        this.positions = new Dictionary<string, Position>();
        this._cash = 0;
	}

}

